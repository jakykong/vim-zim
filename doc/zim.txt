*zim.txt*   *Zim* Note wrapper for Vim 

                                                            *zim.vim*
            ___    /   /                                             ~
           |_ _|  /  /         _________      _                       ~
    ___      |_  / /          |_______  |    | |                      ~
   |_ _|  .-'   //                  ,' ,'     _     _  ____   ____    ~
       \ '     /  '    ___        ,' ,'      | |     \/ __ \ / __ \   ~
        |          | -|_ _|     ,' ,'        | |    | |   | |    | |  ~
        '.        .'          ,' ,'_____     | |    | |   | |    | |  ~
     ___/ '- __ -'          __|_________|__ _|_|_ __|_|   |_|    |_|__~
    |_ _|     _|_                                                     ~
             |_ _|      Zim -  A Desktop Wiki  (for Vim 7.0 or newer)  ~

                                                                *zim-toc*

      DESCRIPTION  = = = = = = = = = = = = = = = = = =  |zim-intro|
      VARIABLES  = = = = = = = = = = = = = = = = = = =  |zim-variables|
      COMMANDS = = = = = = = = = = = = = = = = = = = =  |zim-commands|
      EDITOR ACTIONS AND KEYBINDINGS = = = = = = = = =  |zim-editing|
      API  = = = = = = = = = = = = = = = = = = = = = =  |zim-api|
      TRICKY THINGS  = = = = = = = = = = = = = = = = =  |zim-tricky|

==============================================================================
DESCRIPTION                                                        *zim-intro*
                                                                   |zim-toc|
This Zim plugin provides additions to Vim for use with Zim wiki files.
 * Syntax highlighting and filetype detection for Zim files
 * Commands for navigating through Notes 
 * Commands/keymapping to bold, italicize, strike, or mark text.

The typical workflow is:
 * Create files in Zim, and use Tools->Edit Source to access Vim.
 * Create files in Vim, and (re)start Zim to read them.

Authors:
  Jack Mudge       Original code
  Luffah           Bug correction, Navigation functionnalities, Help file
 
  See code for more details.

Licenses:
  Public Domain
  CC 0 for the documentation
  GPL 
  Same kind as vim -- we care to free softwares but we need to free peoples  
 
==============================================================================
VARIABLES                                                       *zim-variables*
                                                                |zim-toc|

*g:zim_notebook*
                   Default : $HOME/Notesbooks
                   You can modify easily with |:ZimCD| an |:ZimSelectNotebook|


*g:zim_notebooks_dir*
                   Default : $HOME/Notesbooks


*g:zim_update_index_key*
                   [Linux only; require XdoTools installed]
                   Set the key to auto-update of a living Zim instance.
                   =Configuration example=
                   In vimrc :
                    let g:zim_update_index_key="F5"

                   In $HOME/.config/zim/accelmap :
                    (gtk_accel_path "<Actions>/GtkInterface/reload_index" "F5")


*g:zim_keymapping*
                   Set the keys associated to actions
                   defined in *g:zim_edit_actions* (../plugin/zim.vim). 
                   Default : {
                       \ '<cr>'               :  '<CR>',
                       \ 'continue_list'      :  '<Leader><CR>',
                       \ 'jump'               :  '<Leader>g',
                       \ 'jump_back'          :  '<Leader>G',
                       \ 'bold'               :  '<Leader>wb',
                       \ 'italic'             :  '<Leader>wi',
                       \ 'highlight'          :  '<Leader>wh',
                       \ 'strike'             :  '<Leader>ws',
                       \ 'title'              :  '<Leader>wt',
                       \ 'header'             :  '<Leader>wH',
                       \ 'all_checkbox_to_li' :'<F8>',
                       \ 'li'                 :'<Leader>wl',
                       \ 'checkbox'           :'<Leader>wc',
                       \ 'checkbox_yes'       :'<F12>',
                       \ 'checkbox_no'        :'<S-F12>'
                       \ }


*g:zim_brutal_update_allowed*
                   On sourcing, set to 1 to declare the command ZimBrutalUpdate,
                   which kill Zim and relaunch it.


*g:zim_open_jump_to*
                   Set where the cursor is positionned on file openning.
                   This is done by a succession of movements.

                   This is implemented by the function zim#util#line({array}),
                   which return the line number found and move the cursor only
                   if it needs to do scrolling.

                   The array can contain 3 types of variables (mouvements),
                   with different meanings :
                     string   text pattern  e.g. 'My Awesome Title'
                                            e.g. '^\(=\+\).*\1$'
                              see *regular-expression* *regexp*

                     integer  line delta  e.g. -1 to go back 1 line

                     dict     {
                        'init': '$' or '^' or any 'line' position

                        'sens' : (-1 or 1) line step for searching text

                        'get': a key for storing current line number

                        'set': an existing key to reinit line position

                        'scroll': a list of scroll commands
                             Either
                                  'top','center','bottom' to scroll until the
                                  cursor is at the nammed position
                             Or
                                  an integer, indication how many line to
                                  scroll
                     }

                   Examples :
                   " On note openning, go 2 lines after the first title
                   let g:zim_open_jump_to=["==.*==", 2]
                   " Or Go 2 lines after the last title
                   let g:zim_open_jump_to=[{'init': '$', 'sens': -1}, "==.*==", 2]]

*g:zim_matchable*
                   Enable commands ZimMatchNext<Matchable> and
                   ZimMatchPrev<Matchable>.

                   dict {
                     'Title': text pattern  e.g. '^\(=\+\).*\1$',
                              see |regular-expression| |regexp|
                      ...
                   }

                   Examples :
                   " have a match for almost every zim standard element
                   let g:zim_matchable={
                       \'Title':        '^\(=\+\).*\1$',
                       \'Checkbox':     '^\(\s\{4}\)*\[[ ]\]\(\s\|$\)',
                       \'Li':           '^\(\s\{4}\|\t\)*\*\(\s\|$\)',
                       \'NumberedItem': '^\(\s\{4}\|\t\)*\d\+\.\(\s\|$\)',
                       \'Link':         '\[\[.*\]\]',
                       \'Img':          '{{.*}}',
                       \'File':         '\(\~\|\.\|^\| \|{\|\[\)/[.a-zA-Z0-9]\+',
                       \'Url':          'http[s]\?://[.a-zA-Z0-9]\+',
                       \ }


*g:zim_img_capture*
                   Define a shell command to capture screenshots.
                   Default : 'sleep 2; scrot -s'
                             "wait 2 second to avoid scrot capturing keys
                   This default only work for linux.

*g:zim_img_viewer*
*g:zim_img_editor*
*g:zim_ext_viewer*
*g:zim_ext_editor*
                   Define viewer and editor commands based of the file type.

                   |g:zim_img_viewer| and |g:zim_ext_editor|
                     are specific to Zim images ( between {{ }} ).

                   array [
                      array [
                        (filetype)      text-pattern,
                                        see |regular-expression| |regexp|
                        (shell command) text,
                        (optionnal)     number
                              0 to open all matched files in one instance
                              1 to open one file per instance
                              n to open n   files per instance
                              Default is 0.
                      ]
                      array ...
                    ]
                    Example :
                    " Open in images in feh
                    let g:zim_img_viewer=[
                      \[
                      \  '\.\(png\|jp[e]\?g\|svg\|gif\)$',
                      \  'feh --magick-timeout 1'
                      \],
                    \]

                    If no overide is done, default openner is 'xdg-open',
                    which shall not work on Windows.

                    To use this functionnality, you need to add to 
                    the actions 'show_img','edit_img','show_file','edit_file'
                    in *g:zim_keymapping*.

*g:zim_dev*
                    For developers.
                    Set to 1 to reload function on plugin/zim.vim sourcing.

==============================================================================
COMMANDS                                                        *zim-commands*
                                                                |zim-toc|

:ZimCD <notebook_name>                                               *:ZimCD*
                    Arguments are completed in wild menu.

                    Set |g:zim_notebook| = <notebook_name>

:ZimListThis                                                    *:ZimListThis*
                    :ZimList with word under cursor.

:ZimList <note_name_pattern>                                        *:ZimList*
                    Arguments are completed in wild menu.

                    Open a temporary window to choose notes to open.
                    Following keys are avaible in this window :

                    <cr>      -> Open note in current window

                    <space>   -> Open note in an aside window (preview)

                     u        -> Update the list

                     f        -> Modify filter <note_name_pattern>

                     d        -> Detect doubles names.
                                 Toggle an indicator '|' to show notes that
                                 have the same name.

                                 Once it's toggled, you can jump to doubles by
                                 pressing 'n' (Next).

                     D        -> Delete permanetly the note file
                                 (does not trash; not recursive)

                     N        -> Create a new note in the path under cursor.
                                 A prompt will appear.
                                 The new note can be a subpath.
                                 (note creation move to another
                                 window; list is not updated)

                     m        -> Move the note (under cursor)
                                 This act in 3 steps :
                                 1. select the current note by pressing 'm'
                                 2. when you see '| MOVING' aside the note,
                                    move cursor to another note
                                 3. press 'm' again in order to
                                    move the note in the same path than

                     R        -> Rename the note (under cursor)
                                 A prompt will appear...

                     q        -> Quit

                    Note : Display appear to be broken when using 'm' operation
                          in terminal (text-mode) version of vim. Switch tab
                          if you need to redraw.

                    Note : openning is defined in zim/explorer.vim and
                          is performed using the function |zim#util#open()|


:ZimNewNote <note_path_in_notebook>                               *:ZimNewNote*
                    Arguments are completed in wild menu.

                    Recursively create the note specified in
                    <note_path_in_notebook>. If any parent note is missing,
                    then it is automatically created.
                    
                    [ Linux only ]
                    If |g:zim_update_index_key| is set and `xdotool` is found,
                    then it tries to locate Zim window and to send the key.

:ZimNewNoteFromWeb <note_path_in_notebook>                 *:ZimNewNoteFromWeb*
                    Idem. It adds a prompt to enter the URL of the remote
                    content to inject.

:ZimCopy  <note_path_in_notebook> <note_path_in_notebook>            *:ZimCopy*
:ZimMove  <note_path_in_notebook> <note_path_in_notebook>            *:ZimMove*
                    Arguments are completed in wild menu.

                    Copy or Move the note to another note path.

                    If needed : Recursively create the note specified in
                    <note_path_in_notebook>.

                    [ Linux only ]
                    If |g:zim_update_index_key| is set and `xdotool` is found,
                    then it tries to locate Zim window and to send the key.

:ZimGrepThis                                                     *:ZimGrepThis*
                    :ZimGrep with word under cursor.

:ZimGrep <pattern>                                                   *:ZimGrep*
                    Open a location list for
                    the matches of <pattern> in g:zim_notebook.

:ZimSelectNotebook                                         *:ZimSelectNotebook*
                    Open a temporary window to choose the current notebook. 
                    
                    Set |g:zim_notebook|

:ZimImgInsert  <filepath>                                       *:ZimImgInsert*
                    Insert image pointed by filepath at cursor position. 
                    
:ZimImgCapture  <filepath>                                     *:ZimImgCapture*
                    Make a screenshot and save it in filepath,
                    next, the image is inserted at cursor position. 
                    

:ZimMatchPrev...                                     *:ZimMatchPrev...*
:ZimMatchNext...                                     *:ZimMatchNext...*
                    Go to the previous / next position of the element type.
                    See |g:zim_matchable|

:ZimInjectHtml <url>                                 *:ZimInjectHtml*
                    [require pandoc installed]

                    Convert the content of the (local or remote) HTML file,
                    to ZimWiki format and add the result at the current
                    position.  

:ZimCleanNote                                       *:ZimCleanNote*
                   Clean all things are supported in Vim-Zim,
                   but not in the current version of Zim.
                   This includes for now:
                   - markdown codeblock

==============================================================================
EDITOR ACTIONS AND KEYBINDINGS                                   *zim-editing*
                                                                 |zim-toc|

In a zim buffer, you can use keybindings defined in |g:zim_keymapping|
to call special actions defined in |g:zim_edit_actions|.
If you wish to modify keys just re-defined |g:zim_keymapping|.
If you wish to modify the mode in which the keys are used , then you need to
redefine |g:zim_edit_actions|. (see the code ../plugins/zim.vim to have a basis).

                                                  *zim_keymapping*
Here is a summary of the default settings.
┌──────────────────┬────┬────────────┬─────────────┬─────────────────────────────┐
│Actions           │Mode│Default Keys│Dev Keys     │ Description                 │
│──────────────────┼────┼────────────┼─────────────┼─────────────────────────────┤
│-Style------------│----│------------│-------------│-----------------------------│
│bold              │n,v │<Leader>wb  │<Leader>b    │ Bold style.                 │
│italic            │n,v │<Leader>wi  │<Leader>i    │ Italic style.               │
│highlight         │n,v │<Leader>wh  │<Leader>h    │ Highlight.                  │
│strike            │n,v │<Leader>ws  │<Leader>s    │ Strike through.             │
│title             │n   │<Leader>wt  │<Leader>t    │ Title style ( 1 to 5 ).     │
│li                │n,v │<Leader>wl  │<Leader>l    │ List item.                  │
│checkbox          │n,v │<Leader>wc  │<Leader>c    │ Empty checkbox              │
│checkbox_yes      │n,v │<F12>       │<Leader>y    │ → check "Yes/Correct"       │
│checkbox_no       │n,v │<S-F12>     │<Leader>n    │ → check "No/Incorrect"      │
│checkbox_moved    │n,v │<Leader>w>  │<Leader>>    │ → check "Moved"             │
│                  │    │            │             │                             │
│-Facilities-------│----│------------│-------------│-----------------------------│
│<cr>              │i   │<CR>        │<CR>         │ <Enter> continue the list.  │
│continue_list     │n   │<Leader><CR>│<Leader><CR> │ Continue a list             │
│                  │    │            │             │ (dot, numbered or checkbox).│
│all_checkbox_to_li│n   │<F8>        │             │ Remove every checkbox.      │
│header            │n   │<Leader>wH  │<Leader>H    │ Add a Zim header.           │
│date              │n   │<Leader>d   │<Leader>d    │ Insert today date.          │
|datehour          │n   │<Leader>D   │<Leader>D    │ Insert today date and hour. │
│showimg           │n   │<F3>        │<F3>         │ Open image in viewer.       │
│editimg           │n   │<S-F3>      │<S-F3>       │ Open image in editor.       │
│showfile          │n   │<F4>        │<Leader><Tab>│ Open file in viewer.        │
│editfile          │n   │<S-F4>      │<Leader>     │ Open file in editor.        │
│                  │    │            │    <S-Tab>  │                             │
│-Navigation-------│----│------------│-------------│-----------------------------│
│jump              │n   │<Leader>g   │gf           │ Jump to another note.       │
│jump_back         │n   │<Leader>G   │<Leader>G    │ Jump back.                  │
│explore           │n   │<F9>        │<F9>         │ Open parent folder.         │
│nextKeyElement    │n   │            │<C-Up>       │ Go/Focus the next element   │
│                  │    │            │             │ (title, link, checkbox).    │
│prevKeyElement    │n   │            │<C-Down>     │ Go/Focus previous element.  │
│nextTitle         │n   │            │<S-Up>       │ Go/Focus the next title.    │
│prevTitle         │n   │            │<S-Down>     │ Go/Focus previous title.    │
└──────────────────┴────┴────────────┴─────────────┴─────────────────────────────┘

If you do nothing, then the "Default Keys" will be used.
                                                             *g:zim_dev_keys*
You can use the keys used by the 2nd developer "Dev Keys" by adding
the following line to your configuration file : >
  let g:zim_dev_keys=1
<
Note: This setting will override every definition of g:zim_keymapping,
because it is the best keymap definition. 

The "dev" keys are defined like this: >
  let g:zim_keymapping={
      \ '<CR>':'<CR>',
      \ 'continue_list':'<Leader><CR>',
      \ 'jump':'gf',
      \ 'jump_back':'<Leader>G',
      \ 'bold':'<Leader>b',
      \ 'italic':'<Leader>i',
      \ 'highlight':'<Leader>h',
      \ 'strike':'<Leader>s',
      \ 'title':'<Leader>t',
      \ 'header':'<Leader>H',
      \ 'li':'<Leader>l',
      \ 'checkbox':'<Leader>c',
      \ 'checkbox_yes':'<Leader>y',
      \ 'checkbox_no':'<Leader>n',
      \ 'checkbox_moved':'<Leader>>',
      \ 'date':'<Leader>d',
      \ 'datehour':'<Leader>D',
      \ 'showimg': '<F3>',
      \ 'editimg': '<S-F3>',
      \ 'showfile':'<Leader><Tab>',
      \ 'editfile':'<Leader><S-Tab>',
      \ 'nextKeyElement':'<C-Down>',
      \ 'prevKeyElement':'<C-Up>',
      \ 'nextTitle':'<S-Down>',
      \ 'prevTitle':'<S-Up>',
      \}
<
==============================================================================
API                                                                   *zim-api*

Functions you can use :

zim#util#line({array})
  A complex function to find a line number.
  see |g:zim_open_jump_to| |zim#util#line()|

zim#util#open({openning-window},{edit-opt},{focus},{file})
   A function for file in a split or in current window.
  {openning-window} contains commands to create split
  {edit-opt}        contains the commands like 'noswapfile' 
  {focus}           is a 0 or 1 value to say to focus on new buffer
  {file}            is the file full path


==============================================================================
TRICKY THINGS                                                      *zim-tricky*

Setup a TODOLIST                                                 *zim-todolist*
----------------
In your vimrc file, add >

  function! s:todolist(whereopen)
    call zim#util#open(
          \ a:whereopen,
          \ 'noswapfile',
          \ 1,
          \ g:zim_notebooks_dir.'/Notes/TODO.txt')

    " find to first empty checkbox; find the title of the section it belong
    " and make this title to be the second line of the window
    exe zim#util#line([
          \ '==.*==',
          \ '\[ \].*',
          \ {'get': 1, 'sens':-1},
          \ '==.*==',
          \ {'scroll': ['top',1], 'set':1}
          \ ])

    " put highlight on current line
    hi CursorLine gui=bold guibg=white guifg=black 
    setlocal cul

  endfunction
  command! Todo :silent call s:todolist('vertical leftabove split')

  function! s:autostart()
    if !exists('g:loaded_todo') && empty(bufname('%'))
      call s:todolist('')
      let g:loaded_todo=1
    endif
  endfunction

  augroup _zim_autostart | autocmd!
  autocmd VimEnter <buffer> silent call s:autostart()
  augroup END
<

==============================================================================
vim:tw=78:fo=tcq2:isk=!-~,^*,^\|,^\":ts=8:ft=help:norl:
